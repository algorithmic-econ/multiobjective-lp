{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>About this project ...</p>"},{"location":"#mkdocs-examples","title":"MkDocs Examples","text":""},{"location":"#admonitions","title":"Admonitions","text":"About (1) <p>Collapsible panel</p> <ol> <li>\ud83d\ude80 I'm an annotation!</li> </ol> <p>Be careful</p>"},{"location":"#graphs","title":"Graphs","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"#latex","title":"LaTeX","text":"<p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p>"},{"location":"meeting-notes/","title":"Notes","text":""},{"location":"meeting-notes/#11072024","title":"11/07/2024","text":"<ul> <li> Implement solver and use actualSolve<ul> <li>Allow to inject Gurobi under etc.</li> </ul> </li> <li> Example dummy solver<ul> <li>sum multiobjectives into one objective and run default PULP</li> </ul> </li> <li> Documentation</li> <li> package publishing</li> <li> Implement constrained mes as solver</li> <li> Compare solvers by fairness</li> <li> Criteria module to get metrics about provided solution, e.g:<ul> <li> sum of objectives</li> <li> count of non zero objective</li> <li> other examples, proportionality...</li> </ul> </li> </ul>"},{"location":"code-reference/","title":"Index","text":"<ul> <li>MultiObjectiveLpProblem</li> <li>SummedObjectivesLpSolver</li> </ul>"},{"location":"code-reference/multi-objective-lp-problem/","title":"MultiObjectiveLpProblem","text":""},{"location":"code-reference/multi-objective-lp-problem/#multiobjective_lp.model.multi_objective_lp-classes","title":"Classes","text":""},{"location":"code-reference/multi-objective-lp-problem/#multiobjective_lp.model.multi_objective_lp.MultiObjectiveLpProblem","title":"<code>MultiObjectiveLpProblem</code>","text":""},{"location":"code-reference/multi-objective-lp-problem/#multiobjective_lp.model.multi_objective_lp.MultiObjectiveLpProblem-attributes","title":"Attributes","text":"<code>logger: Logger</code> <code>property</code> <code></code> <code>objectives: List[LpAffineExpression]</code> <code>property</code> <code></code> <code>to_dict = toDict</code> <code>class-attribute</code> <code>instance-attribute</code>"},{"location":"code-reference/multi-objective-lp-problem/#multiobjective_lp.model.multi_objective_lp.MultiObjectiveLpProblem-functions","title":"Functions","text":"<code>__init__(name, objectives=None, logger=None)</code> <code></code> <code>fixObjective()</code> <code></code> <code>restoreObjective(wasNone, dummyVar)</code> <code></code> <code>setObjectives(objectives)</code> <code></code> <code>toDict()</code>"},{"location":"code-reference/summed-objectives-lp-solver/","title":"SummedObjectivesLpSolver","text":""},{"location":"code-reference/summed-objectives-lp-solver/#examples.summing.SummedObjectivesLpSolver-classes","title":"Classes","text":""},{"location":"code-reference/summed-objectives-lp-solver/#examples.summing.SummedObjectivesLpSolver.SummedObjectivesLpSolver","title":"<code>SummedObjectivesLpSolver</code>","text":"Info <p>Example dummy solver that sums multiple objectives.</p>"},{"location":"code-reference/summed-objectives-lp-solver/#examples.summing.SummedObjectivesLpSolver.SummedObjectivesLpSolver-functions","title":"Functions","text":"<code>__init__()</code> <code></code> <code>actualSolve(lp)</code> <p>Parameters:</p> Name Type Description Default <code>lp</code> <code>MultiObjectiveLpProblem</code> <p>Instance of MultiObjectiveLpProblem</p> required"},{"location":"code-reference/summed-objectives-lp-solver/#code-examples","title":"Code examples:","text":"Warehouse cost example <pre><code>from model.multi_objective_lp import MultiObjectiveLpProblem\nfrom pulp import LpVariable, lpSum\nfrom examples.summing.SummedObjectivesLpSolver import SummedObjectivesLpSolver\n\n# we are building only one warehouse\nwarehouses_to_build = 1\n\n# define the costs for the warehouse choices\nwarehouse_fixed_costs = [100, 120, 80]\ncost_per_km = [3, 3, 3]\ndistances = [20, 30, 45]\ntransport_costs = [cost * dist for cost, dist in zip(cost_per_km, distances)]\nwarehouses = ['1', '2', '3']\n\nmodel = MultiObjectiveLpProblem(name='warehouse')\n\nbuild_warehouse_flag = LpVariable.matrix(\"build\", warehouses, cat=\"Binary\", lowBound=0)\n\nmodel += lpSum(build_warehouse_flag) == warehouses_to_build\n\n# cost to be minimized\ntransport_obj = lpSum([trans_cost * flag for trans_cost, flag in zip(transport_costs, build_warehouse_flag)])\nfix_obj = lpSum([fix_cost * flag for fix_cost, flag in zip(warehouse_fixed_costs, build_warehouse_flag)])\n\nmodel.setObjectives([transport_obj, fix_obj])\nmodel.solve(solver=SummedObjectivesLpSolver())\n</code></pre>"}]}